#run all the below code to automatically run the pipeline
#change working directory, filenames, parameters as needed
#Set work directory and values for running the pipeline
setwd("~/Library/CloudStorage/OneDrive-LATROBEUNIVERSITY/1_Proteomics/0_Finalresults/1_phospho_WT")
datafile = "ME341_Phospho_combined_TAIR_no_norm_WT_filtered.csv"
stat = "p"
qval = 0.05
compsfile = "comps.xlsx"

# install PoissonSeq from source

if (!require('PoissonSeq', character.only=T, quietly=T)) {
  # combinat is required for PoissonSeq
  install.packages('combinat')
  install.packages('~/Downloads/PoissonSeq_1.1.2.tar', repos = NULL, type="source")
  library('PoissonSeq', character.only=T)
}else{
  library('PoissonSeq',character.only=T)
}

library(openxlsx)
library(plyr)
library(dplyr)
library(PoissonSeq)
library(shiny)
library(stringr)
library(ggrepel)
library(ggbiplot)
library(EnhancedVolcano)
library(devtools)

#do not change this code!
#check that all packages are installed, and load them
for (package in c('openxlsx', 'plyr','dplyr','PoissonSeq','shiny')) {
  if (!require(package, character.only=T, quietly=T)) {
    install.packages(package)
    library(package, character.only=T)
  }else{
    library(package,character.only=T)
  }
}

if (!require('ggbiplot',quietly=T)) {
  install.packages('devtools')
  library(devtools)
  install_github("vqv/ggbiplot")
  library('ggbiplot')
}else{
  library('ggbiplot')
}

if (!require('EnhancedVolcano',quietly=T)) {
  install.packages("BiocManager")
  BiocManager::install("EnhancedVolcano")
  library('EnhancedVolcano')
}else{
  library('EnhancedVolcano')
}

source("modified_ProteomeDiscoverer_PoissonSeq_Pipeline.R")

ProteomeDiscoverer_PoissonSeq_Pipeline(datafile, stat, qval,compsfile)


###plot seperate pca plot-take the hormone:ABA Phospho data in WT seedling as example
####read in the pca plot data
pca_plot_data <- read.csv('pca_plot_data.csv')
pca_plot_data$category <- sapply(str_split(pca_plot_data$X, '_'), '[[', 1)

pca_plot_data %>%
  filter(category %in% c('WTABA', 'WTmock')) %>%
  ggplot(aes(x=xvar, y=yvar, col= category)) +
  geom_point()+
  geom_text_repel(aes(label= labels), show.legend = F)+
  xlab('standardized PC1 (84.4% explained var.)')+
  ylab('standardized PC2 (9.4% explained var.)')


pca_plot_data %>%
  filter(category %in% c('WTACC', 'WTmock')) %>%
  ggplot(aes(x=xvar, y=yvar, col= category)) +
  geom_point()+
  geom_text_repel(aes(label= labels), show.legend = F)+
  xlab('standardized PC1 (84.4%  explained var.)')+
  ylab('standardized PC2 (9.4% explained var.)')


pca_plot_data %>%
  filter(category %in% c('WTBR', 'WTmock')) %>%
  ggplot(aes(x=xvar, y=yvar, col= category)) +
  geom_point()+
  geom_text_repel(aes(label= labels), show.legend = F)+
  xlab('standardized PC1 (84.4% explained var.)')+
  ylab('standardized PC2 (9.4% explained var.)')

pca_plot_data %>%
  filter(category %in% c('WTJA', 'WTmock')) %>%
  ggplot(aes(x=xvar, y=yvar, col= category)) +
  geom_point()+
  geom_text_repel(aes(label= labels), show.legend = F)+
  xlab('standardized PC1 (84.4% explained var.)')+
  ylab('standardized PC2 (9.4% explained var.)')


pca_plot_data %>%
  filter(category %in% c('WTSL', 'WTmock')) %>%
  ggplot(aes(x=xvar, y=yvar, col= category)) +
  geom_point()+
  geom_text_repel(aes(label= labels), show.legend = F)+
  xlab('standardized PC1 (84.4% explained var.)')+
  ylab('standardized PC2 (9.4% explained var.)')

pca_plot_data %>%
  filter(category %in% c('WTSA', 'WTmock')) %>%
  ggplot(aes(x=xvar, y=yvar, col= category)) +
  geom_point()+
  geom_text_repel(aes(label= labels), show.legend = F)+
  xlab('standardized PC1 (84.4% explained var.)')+
  ylab('standardized PC2 (9.4% explained var.)')

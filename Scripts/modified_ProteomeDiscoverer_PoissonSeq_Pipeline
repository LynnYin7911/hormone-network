#Label free pipeline
#This is an edited version of TMT-NEAT (edited by Natalie C; modified by Lingling Y) that will work with label free data searched using ProteomeDiscoverer

#Parameters
#datafile is the name of the table provided by ProteomeDiscoverer with the RAW intensities (not normalized, not imputed!)
#that has been pre-processed (technical reps merged, undetected protein groups removed). Your intensity columns
#must be named Sample_Replicate_Intensity where you replace "Sample" with your sample name and "Replicate"
#with the replicate number (1,2,3). Your table needs to be saved as a .csv file.
#stat is either "p" or "q" (make sure to use quotes!). This tells the pipeline whether to use p or q value.
#qval is the cutoff for differential expression (e.g. 0.05). 
#compsfile is an Excel file with the list of pairwise comparisons you want. The comparison names must match
#the sample names in your datafile!

#Use the "modified_Pipeline_Script.R" file to run the pipeline

ProteomeDiscoverer_PoissonSeq_Pipeline = function(datafile, stat, qval,compsfile){
  
#load table and get intensity values
data = read.csv(datafile,stringsAsFactors=FALSE)
# re-order the data based on the sequence
data <- data[order(data$Sequence),]
data$newId <- NA
data$newId[1] <- 1
data$newId_1 <- NA
data$newId_1[1] <- 1
for(i in 2:nrow(data)) {
  if(data[i, 'Sequence'] != data[i-1, 'Sequence']) {
    data$newId[i] <- data$newId[i-1] +1
    data$newId_1[i] <- 1
  } else {
    data$newId[i] <- data$newId[i-1]
    data$newId_1[i] <- data$newId_1[i-1]+1
  }
}

rownames(data) <- paste(data$newId, data$newId_1, sep='.')
# remove newIDs
data <- data[,-(39:40)]

finalintensities = data[,grepl("_",colnames(data),ignore.case=TRUE)]

#plot boxplot before normalization
#QC plots
pdf(file='boxplot_log2.pdf')
invisible(b <- boxplot(log2(finalintensities+1),col="blue",ylab="log2(Intensity)",cex.axis=0.75,las=2))
print(b)
dev.off()

message("Sample loading normalization...")
#perform sample loading normalization (SLN)
  myints = finalintensities
  #column normalize
  sums = colSums(na.omit(myints))
  meansums = mean(sums)
  normfactor = sums/meansums
  myintensitiesnorm = myints
  for (j in 1:dim(myints)[2]){
    myintensitiesnorm[,j] = ceiling(myints[,j]/normfactor[j])
  }
  #additional MAD normalization for variance stabilization!!!!!
  myintensitiesnorm <-as.data.frame(apply(myintensitiesnorm, 2, function(x) (x/mad(x, na.rm=T) )))
  normintensities=myintensitiesnorm
  write.csv(normintensities,"sample_loading_normalization.csv")
  finalimpintensitiesIRS=normintensities

#QC plots
pdf(file='boxplot_log2_norm.pdf')
invisible(b <- boxplot(log2(finalimpintensitiesIRS+1),col="blue",ylab="log2(Intensity)",cex.axis=0.75,las=2))
print(b)
dev.off()

#clustering
h = hclust(dist(colMeans(na.omit(finalimpintensitiesIRS))))
pdf(file='clusters.pdf')
plot(h)
dev.off()

#pca
  pcaresults = prcomp(t(na.omit(finalimpintensitiesIRS)))
  #plot PCA
  #I changed the group parameter from c(1,1,1,2,2,2,3,3,3,4,4,4) to rep(1:(ncol(finalimpintensitiesIRS)/3), each=3)
  g <- ggbiplot(pcaresults, groups = rep(1:(ncol(finalimpintensitiesIRS)/3), each=3),
                labels=colnames(finalimpintensitiesIRS),
                var.axes=FALSE,labels.size=3,ellipse=TRUE)
  g<- g+ theme(text = element_text(size=14))
  g <- g+scale_color_distiller(palette="Accent")
  pdf(file='PCA.pdf')
  print(g)
  dev.off()

  pca_plot_data <- g$data
  write.csv(pca_plot_data, file = 'pca_plot_data.csv')
  
#make list of all pairwise comparisons
# mysamples = unique(metadata$name)
# mysamples = mysamples[!grepl("Ref",mysamples,ignore.case=TRUE)]
# comps = rep("",choose(length(mysamples),2))
# currentrow = 1
# for (i in 1:(length(mysamples)-1)){
#   for (j in (i+1):length(mysamples)){
#     comps[currentrow] = paste(mysamples[i],"_vs_",mysamples[j],sep="")
#     currentrow = currentrow+1
#   }
# }

#read in list of comparisons
comps = read.xlsx(compsfile)

#perform PoissonSeq
message("Differential expression analysis...")
pseqdata = finalimpintensitiesIRS
newwb <- createWorkbook()
newwb2 <- createWorkbook()
for (i in 1:dim(comps)[1]){
  #get the intensities for this comparison
  sepcomps = strsplit(comps[i,1],"_vs_")
  intensities1 = pseqdata[,grepl(sepcomps[[1]][1],colnames(pseqdata))]
  intensities2 = pseqdata[,grepl(sepcomps[[1]][2],colnames(pseqdata))]
  #make indicator variable y
  y= c(rep(1,dim(intensities1)[2]),rep(2,dim(intensities2)[2]))
  #perform PSeq
  pdata = data.frame(intensities1,intensities2)
  #we need pull out proteins that are expressed in one sample but not the other
  intensities1zeros = rowSums(is.na(intensities1))
  intensities2zeros = rowSums(is.na(intensities2))
  detected1 = pdata[intensities1zeros<=1 & intensities2zeros==3,]
  detected2 = pdata[intensities2zeros<=1 & intensities1zeros==3,]
  alldetected = rbind(detected1,detected2)
  data = data[order(row.names(data)),]
  # I changed the coloumns that included in myresults
  myresults = data.frame(data[row.names(data)%in%row.names(alldetected), c(1:12, str_which(names(data), sepcomps[[1]][1]),str_which(names(data), sepcomps[[1]][2]))],pseqdata[row.names(pseqdata)%in%row.names(alldetected),c(str_which(names(pseqdata), sepcomps[[1]][1]),str_which(names(pseqdata), sepcomps[[1]][2]))])
  #save these to specific data sheets
  mysheet = paste(comps[i,1],"_zeros",sep="")
  addWorksheet(wb = newwb, sheetName = mysheet, gridLines = TRUE)
  writeDataTable(wb=newwb, sheet=mysheet,x=myresults,tableStyle="none",
                 rowNames=TRUE,withFilter=FALSE,
                 bandedRows=FALSE,bandedCols=FALSE)
  #this makes it so that you only use proteins detected in all 3 replicates
  pdata = na.omit(pdata)
  pseq<- PS.Main(dat=list(n=pdata,y=y,type="twoclass",pair=FALSE,gname=row.names(pdata)),para=list(ct.sum=0,ct.mean=0))
  #get the actual fc
  pseq = pseq[order(pseq$gname),]
  pdata = pdata[order(row.names(pdata)),]
  myFC = data.frame(rowMeans(pdata[,y==2])/rowMeans(pdata[,y==1]),row.names=row.names(pdata))
  pseq[,7]=log2(myFC)
  colnames(pseq)[7]="log2FC"
  pseqdata = pseqdata[order(row.names(pseqdata)),]
  myresults = data.frame(pseq[,c(1:5,7)],data[row.names(data)%in%pseq$gname,c(1:12, str_which(names(data), sepcomps[[1]][1]),str_which(names(data), sepcomps[[1]][2]))],pseqdata[row.names(pseqdata)%in%pseq$gname,c(str_which(names(pseqdata), sepcomps[[1]][1]),str_which(names(pseqdata), sepcomps[[1]][2]))])
  #save
    mysheet=paste(comps[i,1],"_3reps",sep="")
  addWorksheet(wb = newwb2, sheetName = mysheet, gridLines = TRUE)
  writeDataTable(wb=newwb2, sheet=mysheet,x=myresults,tableStyle="none",
                 rowNames=TRUE,withFilter=FALSE,
                 bandedRows=FALSE,bandedCols=FALSE)
  #make volcano plot
  if (stat=="q"){
    png(filename=paste(paste(comps[i,1],"_volcano_plot_",qval,".png",sep="")),width=2500,height=2000,res=300)
    e <- EnhancedVolcano(pseq,rownames(pseq),'log2FC','fdr',ylim=c(0,3),xlim=c(-3,3),pointSize=1,labSize=0,FCcutoff=log2(1.1),pCutoff=qval,
                         title=paste(comps[i,1],"(",sum(pseq$fdr<qval),")",sep=""),
                         col=c('grey30','grey60','royalblue','red2'),
                         legendLabels=c(paste('FC<1.1, q>',qval,sep=""),paste('FC>1.1, q>',qval,sep=""),paste('FC<1.1, q<',qval,sep=""),paste('FC>1.1, q<',qval,sep="")),
                         legendLabSize=10, ylab = bquote(~-Log[10]~italic(q)))
    plot(e)
    dev.off() 
  }else{
    png(filename=paste(paste(comps[i,1],"_volcano_plot_",qval,".png",sep="")),width=2500,height=2000,res=300)
    e <- EnhancedVolcano(pseq,rownames(pseq),'log2FC','pval',ylim=c(0,3),xlim=c(-3,3),pointSize=1,labSize=0,FCcutoff=log2(1.1),pCutoff=qval,
                         title=paste(comps[i,1],"(",sum(pseq$pval<qval),")",sep=""),
                         col=c('grey30','grey60','royalblue','red2'),
                         legendLabels=c(paste('FC<1.1, p>',qval,sep=""),paste('FC>1.1, p>',qval,sep=""),paste('FC<1.1, p<',qval,sep=""),paste('FC>1.1, p<',qval,sep="")),
                         legendLabSize=10, ylab = bquote(~-Log[10]~italic(p)))
    plot(e)
    dev.off()
  }
  #make qvalue histogram
  if (stat=="q"){
    pdf(file=paste(paste(comps[i,1],"_qval_hist.pdf",sep="")))
    h <- hist(pseq$fdr,breaks=100)
    plot(h)
    dev.off()
  }else{
    pdf(file=paste(paste(comps[i,1],"_pval_hist.pdf",sep="")))
    h <- hist(pseq$pval,breaks=100)
    plot(h)
    dev.off()
  }
  #get differentially expressed genes and save
  if (stat=="q"){
    mypros = pseq[pseq$fdr<qval,c(1:5,7)]
  }else{
    mypros = pseq[pseq$pval<qval,c(1:5,7)]
  }
  mypros = mypros[order(mypros$gname),]
  myresults = data.frame(mypros,data[row.names(data)%in%mypros$gname,c(1:12, str_which(names(data), sepcomps[[1]][1]),str_which(names(data), sepcomps[[1]][2]))],pseqdata[row.names(pseqdata)%in%mypros$gname,c(str_which(names(pseqdata), sepcomps[[1]][1]),str_which(names(pseqdata), sepcomps[[1]][2]))])
  #save
  addWorksheet(wb = newwb, sheetName = mysheet, gridLines = TRUE)
  writeDataTable(wb=newwb, sheet=mysheet,x=myresults,tableStyle="none",
                 rowNames=TRUE,withFilter=FALSE,
                 bandedRows=FALSE,bandedCols=FALSE)
}

#write workbook
if (stat=="q"){
  saveWorkbook(newwb, paste("Pseq_all_comps_q",qval,".xlsx",sep=""),overwrite=TRUE)
}else{
  saveWorkbook(newwb, paste("Pseq_all_comps_p",qval,".xlsx",sep=""),overwrite=TRUE)
}
saveWorkbook(newwb2, "Pseq_all_comps.xlsx",overwrite=TRUE)
message("Finished!")
}

